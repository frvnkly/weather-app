{"version":3,"sources":["WeatherDisplay.js","App.js","index.js"],"names":["WeatherDisplay","weather","Card","fluid","Content","Image","src","icon","Header","name","sys","country","Divider","Grid","columns","divided","Column","main","temp","feels_like","temp_max","temp_min","clouds","all","humidity","pressure","wind","speed","deg","geocoder","Geocodio","process","App","useState","query","setQuery","queryError","setQueryError","setWeather","handleSearch","a","geocode","results","location","lat","lng","axios","params","lon","units","appid","res","data","console","error","className","Container","as","Input","placeholder","size","value","onChange","e","target","label","Button","onClick","labelPosition","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oaAqCeA,EAhCQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxB,OACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAG,UAND,oCAMC,OAAgBL,EAAQA,QAAQ,GAAGM,KAAnC,UACV,kBAACL,EAAA,EAAKM,OAAN,eACMP,EAAQQ,KADd,aACuBR,EAAQS,IAAIC,UAGnC,kBAACC,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,SAAO,GACvB,kBAACF,EAAA,EAAKG,OAAN,KACE,2BAAIf,EAAQA,QAAQ,GAAGgB,MACvB,kDAAoBhB,EAAQgB,KAAKC,KAAjC,UACA,iDAAmBjB,EAAQgB,KAAKE,WAAhC,UACA,2CAAalB,EAAQgB,KAAKG,SAA1B,UACA,0CAAYnB,EAAQgB,KAAKI,SAAzB,WAGF,kBAACR,EAAA,EAAKG,OAAN,KACE,iDAAmBf,EAAQqB,OAAOC,IAAlC,MACA,+CAAiBtB,EAAQgB,KAAKO,SAA9B,MACA,+CAAiBvB,EAAQgB,KAAKQ,SAA9B,SACA,2CAAaxB,EAAQyB,KAAKC,MAA1B,mBAA0C1B,EAAQyB,KAAKE,IAAvD,cCnBNC,EAAW,IAAIC,IAASC,2CA2DfC,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,oBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,MAH1B,mBAGNhC,EAHM,KAGGqC,EAHH,KAUPC,EAAY,uCAAG,oCAAAC,EAAA,+EAEKX,EAASY,QAAQP,GAFtB,cAEXO,EAFW,SAGIA,EAAQC,QAAQ,GAAGC,SAAhCC,EAHS,EAGTA,IAAKC,EAHI,EAGJA,IAHI,SAKCC,IAnBA,kDAqBhB,CACEC,OAAQ,CACNH,IAAKA,EACLI,IAAKH,EACLI,MAAO,WACPC,MAAOnB,sCAZI,OAKXoB,EALW,OAgBjBb,EAAWa,EAAIC,MAhBE,kDAkBjBC,QAAQC,MAAR,MACAjB,GAAc,GAnBG,0DAAH,qDAuBlB,OACE,yBAAKkB,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAD,CAAQiD,GAAG,MAAX,kBAEA,6BAEA,kBAACC,EAAA,EAAD,CACEC,YAAY,oDACZxD,OAAK,EACLyD,KAAK,QACLC,MAAO3B,EACPoB,MAAOlB,EACP0B,SAzCiB,SAACC,GACxB5B,EAAS4B,EAAEC,OAAOH,OAClBxB,GAAc,IAwCR4B,MAAO,kBAACC,EAAA,EAAD,CAAQN,KAAK,QAAQO,QAAS5B,GAA9B,UACP6B,cAAc,YAGbnE,GAAW,kBAAC,EAAD,CAAgBA,QAASA,OCzD/CoE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.c31e4635.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Image, Divider, Grid } from 'semantic-ui-react';\n\nconst ICON_URL = 'http://openweathermap.org/img/w/';\n\nconst WeatherDisplay = ({ weather }) => {\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Image src={`${ICON_URL}${weather.weather[0].icon}.png`} />\n        <Card.Header>\n          {`${weather.name}, ${weather.sys.country}`}\n        </Card.Header>\n\n        <Divider />\n\n        <Grid columns={2} divided>\n          <Grid.Column>\n            <p>{weather.weather[0].main}</p>\n            <p>{`Temperature: ${weather.main.temp}°F`}</p>            \n            <p>{`Feels like: ${weather.main.feels_like}°F`}</p>\n            <p>{`High: ${weather.main.temp_max}°F`}</p>\n            <p>{`Low: ${weather.main.temp_min}°F`}</p>\n          </Grid.Column>\n\n          <Grid.Column>\n            <p>{`Cloudiness: ${weather.clouds.all}%`}</p>\n            <p>{`Humidity: ${weather.main.humidity}%`}</p>\n            <p>{`Pressure: ${weather.main.pressure} hPa`}</p>\n            <p>{`Wind: ${weather.wind.speed} mph at ${weather.wind.deg}°`}</p>\n          </Grid.Column>\n        </Grid>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default WeatherDisplay;\n","import React, { useState } from 'react';\nimport { Container, Header, Input, Button } from 'semantic-ui-react';\nimport Geocodio from 'geocodio-library-node';\nimport axios from 'axios';\n\nimport './styles/index.css';\nimport WeatherDisplay from './WeatherDisplay';\n\nconst OPENWEATHER_API = 'https://api.openweathermap.org/data/2.5/weather';\n\nconst geocoder = new Geocodio(process.env.REACT_APP_GEOCODIO_KEY);\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [queryError, setQueryError] = useState(false);\n  const [weather, setWeather] = useState(null);\n\n  const handleQueryInput = (e) => {\n    setQuery(e.target.value);\n    setQueryError(false);\n  };\n\n  const handleSearch = async () => {\n    try {\n      const geocode = await geocoder.geocode(query);\n      const { lat, lng } = geocode.results[0].location;\n\n      const res = await axios(\n        OPENWEATHER_API,\n        {\n          params: {\n            lat: lat,\n            lon: lng,\n            units: 'imperial',\n            appid: process.env.REACT_APP_OPENWEATHER_KEY,\n          },\n        }\n      );\n      setWeather(res.data);\n    } catch (err) {\n      console.error(err);\n      setQueryError(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as='h1'>Simple Weather</Header>\n\n        <br />\n\n        <Input\n          placeholder='Enter a location (city, state, postal code, etc.)'\n          fluid\n          size='large'\n          value={query}\n          error={queryError}\n          onChange={handleQueryInput}\n          label={<Button size='large' onClick={handleSearch}>Search</Button>}\n          labelPosition='right'\n        />\n\n        {!!weather && <WeatherDisplay weather={weather} />}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}