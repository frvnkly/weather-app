{"version":3,"sources":["WeatherDisplay.js","App.js","index.js"],"names":["WeatherDisplay","weather","location","current","Card","fluid","Content","Image","src","weather_icons","circular","Header","name","region","country","Divider","Grid","columns","divided","Column","weather_descriptions","temperature","feelslike","precip","geocoder","Geocodio","process","App","useState","query","setQuery","queryError","setQueryError","setWeather","handleSearch","a","geocode","results","lat","lng","axios","get","params","access_key","data","success","Error","console","log","error","className","Container","Input","placeholder","size","value","onChange","e","target","label","Button","onClick","labelPosition","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2ZAiCeA,EA9BQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChBC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,QAElB,OACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAKL,EAAQM,cAAc,GAAIC,UAAQ,IAC9C,kBAACN,EAAA,EAAKO,OAAN,eACMT,EAASU,KADf,aACwBV,EAASW,OADjC,aAC4CX,EAASY,UAGrD,kBAACC,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,SAAO,GACvB,kBAACF,EAAA,EAAKG,OAAN,KACE,2BAAIhB,EAAQiB,qBAAqB,IACjC,kDAAoBjB,EAAQkB,YAA5B,UACA,iDAAmBlB,EAAQmB,UAA3B,UACA,oDAAuC,GAAjBnB,EAAQoB,OAA9B,OAGF,kBAACP,EAAA,EAAKG,OAAN,UCdJK,EAAW,IAAIC,IAASC,2CAuDfC,MArDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,oBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,MAH1B,mBAGN3B,EAHM,KAGGgC,EAHH,KAUPC,EAAY,uCAAG,oCAAAC,EAAA,+EAEKX,EAASY,QAAQP,GAFtB,cAEXO,EAFW,SAGIA,EAAQC,QAAQ,GAAGnC,SAAhCoC,EAHS,EAGTA,IAAKC,EAHI,EAGJA,IAHI,SAKKC,IAAMC,IAnBT,sCAqBjB,CACEC,OAAQ,CACNC,WAAYjB,mCACZG,MAAM,GAAD,OAAKS,EAAL,YAAYC,MAVN,WAcY,KATvBtC,EALW,QAcL2C,KAAKC,QAdA,uBAc2BC,MAd3B,QAejBb,EAAWhC,EAAQ2C,MACnBG,QAAQC,IAAI/C,GAhBK,kDAkBjB8C,QAAQE,MAAR,MACAjB,GAAc,GAnBG,0DAAH,qDAuBlB,OACE,yBAAKkB,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,oDACZhD,OAAK,EACLiD,KAAK,QACLC,MAAO1B,EACPoB,MAAOlB,EACPyB,SArCiB,SAACC,GACxB3B,EAAS2B,EAAEC,OAAOH,OAClBvB,GAAc,IAoCR2B,MAAO,kBAACC,EAAA,EAAD,CAAQN,KAAK,QAAQO,QAAS3B,GAA9B,UACP4B,cAAc,YAGb7D,GAAW,kBAAC,EAAD,CAAgBA,QAASA,OCrD/C8D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.479adf4f.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Image, Divider, Grid } from 'semantic-ui-react';\n\nconst WeatherDisplay = ({ weather }) => {\n  const { location, current } = weather;\n\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Image src={current.weather_icons[0]} circular />\n        <Card.Header>\n          {`${location.name}, ${location.region}, ${location.country}`}\n        </Card.Header>\n\n        <Divider />\n\n        <Grid columns={2} divided>\n          <Grid.Column>\n            <p>{current.weather_descriptions[0]}</p>\n            <p>{`Temperature: ${current.temperature}°C`}</p>\n            <p>{`Feels Like: ${current.feelslike}°C`}</p>\n            <p>{`Precipitation: ${current.precip * 10}%`}</p>\n          </Grid.Column>\n\n          <Grid.Column>\n            \n          </Grid.Column>\n        </Grid>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default WeatherDisplay;\n","import React, { useState } from 'react';\nimport { Container, Input, Button } from 'semantic-ui-react';\nimport Geocodio from 'geocodio-library-node';\nimport axios from 'axios';\n\nimport './styles/index.css';\nimport WeatherDisplay from './WeatherDisplay';\n\nconst WEATHERSTACK_API = 'http://api.weatherstack.com/current';\n\nconst geocoder = new Geocodio(process.env.REACT_APP_GEOCODIO_KEY);\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [queryError, setQueryError] = useState(false);\n  const [weather, setWeather] = useState(null);\n\n  const handleQueryInput = (e) => {\n    setQuery(e.target.value);\n    setQueryError(false);\n  };\n\n  const handleSearch = async () => {\n    try {\n      const geocode = await geocoder.geocode(query);\n      const { lat, lng } = geocode.results[0].location;\n\n      const weather = await axios.get(\n        WEATHERSTACK_API,\n        {\n          params: { \n            access_key: process.env.REACT_APP_WEATHERSTACK_KEY,\n            query: `${lat} ${lng}`,\n          },\n        }\n      );\n      if (weather.data.success === false) { throw Error };\n      setWeather(weather.data);\n      console.log(weather);\n    } catch (err) {\n      console.error(err);\n      setQueryError(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Input\n          placeholder='Enter a location (city, state, postal code, etc.)'\n          fluid\n          size='large'\n          value={query}\n          error={queryError}\n          onChange={handleQueryInput}\n          label={<Button size='large' onClick={handleSearch}>Search</Button>}\n          labelPosition='right'\n        />\n\n        {!!weather && <WeatherDisplay weather={weather} />}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}